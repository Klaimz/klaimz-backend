import org.yaml.snakeyaml.*;

buildscript {
    dependencies {
        classpath 'org.yaml:snakeyaml:2.2'
    }
}

plugins {
    id("com.github.johnrengelman.shadow")
    id("io.micronaut.application") version "$micronautVersion"
    id("io.micronaut.aot") version "$micronautVersion"
    id('io.micronaut.test-resources') version "$micronautVersion"

    id 'java'
}

group = 'com.klaimz'
version = '1.0'

repositories {
    mavenCentral()
}

configurations {
    create("localRuntime")
}

tasks.register('runLocal', JavaExec) {
    def stage = System.getenv("STAGE") ?: "local"
    def env = new HashMap<String, String>()
    def envFile = file("../.env." + stage)
    def properties = new Properties()
    properties.load(envFile.newDataInputStream())

    properties.forEach { k, v -> env.put(k.toString(), v.toString()) }

    setEnvironment(env)
    print("Running with env: $env")
    classpath = configurations.getByName("localRuntime") + sourceSets.main.runtimeClasspath
    mainClass = "com.klaimz.Application"
    args("--micronaut.runtime=netty")
}

shadowJar {
    archiveBaseName.set('klaimz-core')
    archiveClassifier.set('')
    archiveVersion.set('')
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = [
            '-parameters'
    ]
}

dependencies {
    localRuntime("io.micronaut:micronaut-http-server-netty:$micronautVersion")
    compileOnly 'org.projectlombok:lombok:1.18.28'
    compileOnly("io.micronaut.openapi:micronaut-openapi-annotations")


    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    annotationProcessor("io.micronaut.data:micronaut-data-document-processor")

    implementation 'jakarta.persistence:jakarta.persistence-api:3.2.0-M1'
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.aws:micronaut-aws-sdk-v2")
    implementation("io.micronaut.crac:micronaut-crac")
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("jakarta.validation:jakarta.validation-api")
    implementation("io.micronaut.aws:micronaut-function-aws-api-proxy")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation 'io.projectreactor:reactor-core:3.6.3'
    implementation("software.amazon.awssdk:s3") {
        exclude group: "software.amazon.awssdk", module: "apache-client"
        exclude group: "software.amazon.awssdk", module: "netty-nio-client"
    }
    implementation("software.amazon.awssdk:url-connection-client")

    implementation("io.micronaut.data:micronaut-data-mongodb")


    implementation("org.mongodb:mongodb-driver-sync")
    runtimeOnly("ch.qos.logback:logback-classic")


    testImplementation("io.micronaut:micronaut-http-client")
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

application {
    mainClass.set("com.klaimz.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

test {
    useJUnitPlatform()
}


graalvmNative.toolchainDetection = false
micronaut {
    runtime("lambda_java")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.klaimz.*")
    }
    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
    }
    testResources {
        enabled = false // disable tests by default ??
    }
}


tasks.named("dockerfileNative") {
    baseImage = "amazonlinux:2"
    jdkVersion = "17"
    args(
            "-XX:MaximumHeapSizePercent=80",
            "-Dio.netty.allocator.numDirectArenas=0",
            "-Dio.netty.noPreferDirect=true"
    )
}

tasks.register('generateServerlessPaths') {
    def openApiFile = new File('core/openapi_klaimz.yml')
    def serverlessFile = new File('serverless.yml')

    def openApiContent = new Yaml().load(openApiFile.text)
    def serverlessContent = new Yaml().load(serverlessFile.text)
    def eventMap = new HashMap<String, String>()

    serverlessContent.functions.core.events.each { event ->
        def key = "eventBridge"
        if (event.httpApi != null) {
            key = event.httpApi.path + ":" + event.httpApi.method
        }
        eventMap.put(key, event)
    }

    openApiContent.paths.each { path, methods ->
        methods.each { method, details ->
            def newEntry = [
                    httpApi: [
                            path  : path,
                            method: method
                    ]
            ]
            def key = path + ":" + method
            eventMap.put(key, newEntry)
        }
    }

    serverlessContent.functions.core.events = eventMap.values()
            .sort { it.httpApi?.path ?: "/0" }.collect()

    def options = new DumperOptions();
    options.setIndent(2);
    options.setPrettyFlow(true);
    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);

    serverlessFile.text = new Yaml(options).dump(serverlessContent)
}


